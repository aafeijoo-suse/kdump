#!/bin/bash
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

. /lib/kdump/setup-kdump.functions

kdump_get_config || return 1

KERNELVERSION=
FORCE=0
QUIET=0
DRACUT=/usr/bin/dracut

#
# Prints usage.                                                              {{{
function usage()
{
    echo "mkdumprd - Create an initrd for kdump"
    echo ""
    echo "This script uses dracut(8) internally. Options:"
    echo ""
    echo "   -k <version>     Kernel to create the initrd for."
    echo "                    Defaults to the running kernel."
    echo "   -f               Force regeneration even if the configuration"
    echo "                    did not change"
    echo "   -q               quiet (don't print status messages)"
    echo "   -h               Print this help"
}                                                                          # }}}

#
# Quiet message                                                              {{{
function status_message()
{
    local msg=$1

    if (( ! $QUIET )) ; then
        echo ">>> $msg"
    fi
}                                                                          # }}}

#
# Create a new initrd using dracut                                           {{{
function run_dracut()
{
    DRACUT_ARGS="--force --hostonly --omit 'plymouth resume usrmount' $@"

    if [ -z "$KERNELVERSION" ]
    then
	KERNELVERSION=$(get_kernel_version "$KERNEL")
    fi

    DRACUT_ARGS="$DRACUT_ARGS --add 'kdump' $INITRD $KERNELVERSION"
    echo "Regenerating kdump initrd ..." >&2
    eval "bash -$- $DRACUT $DRACUT_ARGS"
}                                                                          # }}}

#
# Build $INITRD for fadump with dump capture support using dracut            {{{
function build_fadumprd()
{
    readonly FADUMP_TMPDIR="$(mktemp -d -t fadump.XXXXXX)"
    readonly FADUMPRD_TMPDIR="$FADUMP_TMPDIR/fadumproot"
    readonly TARGET_INITRD="$INITRD"

    INITRD="$FADUMP_TMPDIR/fadump.img"
    run_dracut --no-compress --no-early-microcode
    ret=$?
    if [ $ret -ne 0 ]; then
        exit $ret
    fi

    mkdir $FADUMPRD_TMPDIR
    if ! (kdump_unpack_initrd $INITRD "$FADUMPRD_TMPDIR"); then
        echo "Failed to unpack dump capture scripts."
        exit 1
    fi

    DRACUT_ARGS="--force --add zz-fadumpinit"

    REBUILD_PARAMS="$(cat $BACKUP_INITRD_PARAMS)"
    if ! grep -q "fadumproot" <<< "$REBUILD_PARAMS" ; then
        DRACUT_ARGS="$REBUILD_PARAMS $DRACUT_ARGS"
    fi

    eval "bash -$- $DRACUT $DRACUT_ARGS -i $FADUMPRD_TMPDIR /fadumproot $TARGET_INITRD"
}                                                                          # }}}

#
# Return 0 if $INITRD is already dump capture capable                        {{{
function is_initrd_dump_capturable()
{
    if [ -n "$(lsinitrd $INITRD /lib/dracut/modules.txt | grep ^zz-fadumpinit)" ]; then
        return 0
    fi

    return 1
}                                                                          # }}}

#
# Backup $INITRD params to $BACKUP_INITRD_PARAMS file                        {{{
function backup_default_initrd_params()
{
    DEFAULT_INITRD=$(basename $INITRD)
    INITRD_DIR=$(dirname $INITRD)
    BACKUP_INITRD_PARAMS="$INITRD_DIR/.$DEFAULT_INITRD.params"

    if [ -f $BACKUP_INITRD_PARAMS ] && is_initrd_dump_capturable; then
        return
    fi

    echo "Backing up '$INITRD' build parameters before rebuilding it with dump capture support."
    lsinitrd $INITRD /lib/dracut/build-parameter.txt > $BACKUP_INITRD_PARAMS
}                                                                          # }}}

#
# Build $INITRD with dump capture support using dracut                       {{{
function build_initrd()
{
    if [ "$KDUMP_FADUMP" = "yes" ] ; then
        backup_default_initrd_params
        build_fadumprd
    else
        run_dracut --compress='xz -0 --check=crc32'
    fi
}                                                                          # }}}


# Option parsing                                                             {{{
while getopts "hfqk:K:I:" name ; do
    case $name in
        k)  KERNELVERSION=$OPTARG
            ;;

        f)  FORCE=1
            ;;

        h)  usage
            exit 0
            ;;

        q)  QUIET=1
            ;;

        K)  KERNEL=$OPTARG
            ;;

        I)  INITRD=$OPTARG
            ;;

        ?)  usage
            exit 1
            ;;
    esac
done
shift $(($OPTIND -1))
                                                                           # }}}

#
# if we don't have specified -K <file>, then get the kernel from the version
# if $KERNELVERSION is non-zero and use the default kernel for kdump
# if $KERNELVERSION is zero.
if [ -z "$KERNEL" ] ; then
    if [ -n "$KERNELVERSION" ] ; then
        KERNEL=/boot/vmlinuz-$KERNELVERSION
        test -f "$KERNEL" || KERNEL=/boot/image-$KERNELVERSION
        test -f "$KERNEL" || KERNEL=/boot/Image-$KERNELVERSION
        test -f "$KERNEL" || KERNEL=/boot/vmlinux-$KERNELVERSION
    else
        output=$(kdumptool find_kernel $find_kernel_args)
        KERNEL=$(echo "$output" | grep ^Kernel | cut -f 2)
        INITRD=$(echo "$output" | grep ^Initrd | cut -f 2)
    fi
fi

if ! [ -f "$KERNEL" ] ; then
    echo "Kernel $KERNEL does not exist."
    exit 1
fi

#
# if we don't have specified -I <file>, then get the kernel from the version
if [ -z "$INITRD" ] ; then
    INITRD=/boot/initrd-$KERNELVERSION

    if ! echo $KERNELVERSION | grep -q kdump ; then
        INITRD=$INITRD-kdump
    fi
fi

#
# check if we need to regenerate it?
if (( ! $FORCE )) ; then
    if [ -f "$INITRD" ] && \
            [ "$KDUMP_CONFIG" -ot "$INITRD" ] && \
            [ /root/.ssh/id_dsa.pub -ot "$INITRD" ] && \
            [ /root/.ssh/id_dsa -ot "$INITRD" ] && \
            [ /etc/hosts -ot "$INITRD" ] && \
            [ /etc/nsswitch.conf -ot "$INITRD" ] && \
            [ "$KERNEL" -ot "$INITRD" ] ; then
        status_message "Not regenerating kdump initrd. Use mkdumprd -f to force regeneration."
        exit 0
    fi
fi

build_initrd

exit $?

# vim: set ts=4 sw=4 et fdm=marker: :collapseFolds=1:
